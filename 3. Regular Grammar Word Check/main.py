def readRegularGrammar():

    inputFileName = input("Enter the name of the grammar input file: ").strip()
    inputFile = open(inputFileName)

    grammar = {}

    line = inputFile.readline()

    while line:
        array = line.split()
        grammar[array[0]] = []
        for production in array[2::2]:
            if len(production) > 1:
                if production[0].islower():
                    grammar[array[0]].append((production[0], production[1]))
                else:
                    grammar[array[0]].append((production[1], production[0]))
            else:
                grammar[array[0]].append(production)
        line = inputFile.readline()

    inputFile.close()

    return grammar


def readWords():

    inputFileName = input("Enter the name of the words input file: ").strip()
    inputFile = open(inputFileName)

    words = []
    line = inputFile.readline()

    while line:
        word = line.strip()
        word = word[1:len(word) - 1]
        words.append(word)
        line = inputFile.readline()

    inputFile.close()

    return words


def checkWord(grammar, symbol, word):

    if word == "" and '#' in grammar[symbol] or word in grammar[symbol]:
        return True

    for production in grammar[symbol]:
        if len(production) == 1 and production.isupper():
            if checkWord(grammar, production, word):
                return True

    if word == "":
        return False

    for production in grammar[symbol]:
        if len(production) > 1 and word[0] == production[0]:
            if checkWord(grammar, production[1], word[1:]):
                return True

    return False


def beautifulPrint(word, canBeGenerated):

    if not word:
        word = "Î»"

    print(f"Word {word} is", end=" ")
    if not canBeGenerated:
        print("NOT", end=" ")
    print("generated by the given grammar.")


grammar = readRegularGrammar()

words = readWords()

for word in words:
    canBeGenerated = checkWord(grammar, 'S', word)
    beautifulPrint(word, canBeGenerated)


